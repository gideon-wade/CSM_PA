# program graph test
y := 1; do x > 0 -> y := x * y; x := x - 1 od

# assginments  
a:= 2; if a>1 -> a:=-1 fi;
b:= 1; if b<2 -> b:=-1 fi;
c:= 2; if c=2 -> c:=-1 fi;
d:= 2; if d<=2 -> d:=-1 fi;
e:= 4; if e>=3 -> e:=-1 fi;
f:= 4; if f!=1 -> f:=-1 fi

# lor predicate 
a:= 4; if false | true -> a:=-1 fi;
b:= 4; if true | false -> b:=-1 fi;
c:= -1; if false | false -> c:=4 fi;
d:= 4; if true | true -> d:=-1 fi

# or predicate
a:= 4; if false || true -> a:=-1 fi;
b:= 4; if true || false -> b:=-1 fi;
c:= -1; if false || false -> c:=4 fi;
d:= 4; if true || true -> d:=-1 fi

# and predicates
a:= -1; if false && true -> a:=4 fi;
b:= -1; if true && false -> b:=123 fi;
c:= -1; if false && false -> c:=4 fi;
d:= 4; if true && true -> d:=-1 fi

# land predicates
a:= -1; if false & true -> a:=4 fi;
b:= -1; if true & false -> b:=4 fi;
c:= -1; if false & false -> c:=4 fi;
d:= 4; if true & true -> d:=-1 fi

# not test
a:= 4; if ! false & true -> a:=-1 fi;
b:= 4; if true & ! false -> b:=-1 fi;
c:= 4; if ! (false & false) -> c:=-1 fi;
d:= 4; if ! (! (true & true)) -> d:=-1 fi

# array tests
a[1]:=2; a[1]:=a[1]-3;
b[1]:=a[1]

# array assignment test
i:=0;
do i < 10 ->
a[i]:= i;
i:=i+1
od

# 
c[-1]:= -123

# 
c[-1.3]


#
if x<0 -> y:=(-1*z)*z
[] x=0 -> y:=0
[] x>0 -> y:=z*z
[] x<0 -> y:=1+1
fi

#
i:=0;
x:=0;
y:=0;
do i<10 -> if A[i]>=0 -> x:=x+A[i];
                         i:=i+1
           [] A[i]<0 -> i:=i+1;
                        skip
           fi;
           y:=y+1
od
# fm4fun tests
y:=1;
do x>0 -> y:=x*y;
          x:=x-1
od

#
if x>=y -> z:=x
[] y>x -> z:=y
fi

#
i:=1;
do i<n -> j:=i;
          do (j>0)&&(A[j-1]>A[j]) -> t:=A[j];
                                     A[j]:=A[j-1];
                                     A[j-1]:=t;
                                     j:=j-1
          od;
          i:=i+1
od

#
i:=0;
x:=0;
y:=0;
do i<10 -> if A[i]>=0 -> x:=x+A[i];
                         i:=i+1
           [] A[i]<0 -> i:=i+1;
                        break
           fi;
           y:=y+1
od

#
i:=0;
try do A[i]=x -> throw yes
    [] !(A[i]=x) -> if i<9 -> i:=i+1
                    [] i>=9 -> throw no
                    fi
    od
catch yes: x:=1
   [] no: x:=2
yrt

#
i:=0;
x:=0;
y:=0;
do (n>i)&&(A[i]>=0) -> x:=x+A[i];
                       y:=y+1;
                       i:=i+1
[] (n>i)&&(0>A[i]) -> i:=i+1
od;
x:=x/y

#
if x<0 -> y:=(-1*z)*z
[] x=0 -> y:=0
[] x>0 -> y:=z*z
fi

#
i:=0;
j:=0;
do (i<n)&((j=m)|(i<j)) -> A[i]:=A[i]+27;
                          i:=i+1
[] (j<m)&((i=n)|(!(i<j))) -> B[j]:=B[j]+12;
                             j:=j+1
od

#
i:=1;
if i>=1 -> x:=2;
y:=1+2
fi;
do x<0 -> A[x]:=x+1
[] x>0 -> B[1]:=0
od