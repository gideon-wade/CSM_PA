// Open the file that defines the type "expr" we shall use as AST
%{
open GCLTypesAST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token <String> VARIABLE
%token ASSIGN SEMICOLON SKIP LSPAR RSPAR
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF 
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left ASSIGN SKIP
%right SEMICOLON
%left PLUS MINUS
%left TIMES DIV 
%right POW

// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <cmd> start
%type <expr> expression
%type <cmd> command

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: command EOF             { $1 }
  
// GC ::= b -> C | GC [] GC
// a ::= n | x | A[a] | a + a | a - a | a * a | a / a | - a | a ^ a | (a)
// b ::= true | false | b & b | b | b | b && b | b || b | !b
// | a = a | a != a | a > a | a >= a | a < a | a <= a | (b)


// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:
expression:
  | expression TIMES expression   { TimesExpr($1,$3) }
  | expression DIV expression     { DivExpr($1,$3) }
  | expression PLUS expression    { PlusExpr($1,$3) }
  | expression MINUS expression   { MinusExpr($1,$3) }
  | expression POW expression     { PowExpr($1,$3) }
  | PLUS expression               { UPlusExpr($2) }
  | MINUS expression              { UMinusExpr($2) }
  | NUM                           { Num($1) }
  | VARIABLE                      { Variable($1) }
  | VARIABLE LSPAR expression RSPAR { ArrayVariable($1, $3) }
  | LPAR expression RPAR          { $2 }


// C ::= x := a | A[a] := a | skip | C ; C | if GC fi | do GC od
command:
  | VARIABLE ASSIGN expression {Assign($1, $3)}
  | VARIABLE LSPAR expression RSPAR ASSIGN expression {AssignArray($1, $3, $6)}
  | command SEMICOLON command  {Cmds($1, $3)}
  | SKIP                       {Skip}

  
// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
