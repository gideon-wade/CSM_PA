// Open the file that defines the type "expr" we shall use as AST
%{
open GCLTypesAST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token <String> VARIABLE
%token TRUE FALSE LT GT EQ OR AND NOT
%token ASSIGN SEMICOLON SKIP LSPAR RSPAR IF FI DO OD ARROW GCSEP
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF 
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left ASSIGN SKIP
%right SEMICOLON GCSEP
%left OR
%left AND
%left NOT
%left PLUS MINUS
%left TIMES DIV 
%right POW

// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <cmd> start
%type <aExpr> aExpression
%type <bExpr> bExpression
%type <cmd> command
%type <gCmd> gCommand

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: command EOF             { $1 }
 
// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

// a ::= n | x | A[a] | a + a | a - a | a * a | a / a | - a | a ^ a | (a)
aExpression:
  | aExpression TIMES aExpression   { TimesExpr($1,$3) }
  | aExpression DIV aExpression     { DivExpr($1,$3) }
  | aExpression PLUS aExpression    { PlusExpr($1,$3) }
  | aExpression MINUS aExpression   { MinusExpr($1,$3) }
  | aExpression POW aExpression     { PowExpr($1,$3) }
  | PLUS aExpression               { UPlusExpr($2) }
  | MINUS aExpression              { UMinusExpr($2) }
  | NUM                           { Num($1) }
  | VARIABLE                      { Variable($1) }
  | VARIABLE LSPAR aExpression RSPAR { ArrayVariable($1, $3) }
  | LPAR aExpression RPAR          { $2 }

// b ::= true | false | b & b | b | b | b && b | b || b | !b
// | a = a | a != a | a > a | a >= a | a < a | a <= a | (b)
bExpression:
  | TRUE                            {True}
  | FALSE                           {False}
  | bExpression AND bExpression     {LAnd($1, $3)}
  | bExpression OR bExpression      {LOr($1, $3)}
  | bExpression AND AND bExpression {And($1, $4)}
  | bExpression OR OR bExpression   {Or($1, $4)}
  | NOT bExpression                 {Not($2)}
  | aExpression EQ aExpression      {Equals($1, $3)}
  | aExpression NOT EQ aExpression  {NotEquals($1, $4)}
  | aExpression GT aExpression      {GrtThan($1, $3)}
  | aExpression GT EQ aExpression   {GrtEq($1, $4)}
  | aExpression LT aExpression      {LeThan($1, $3)}
  | aExpression LT EQ aExpression   {LeEq($1, $4)}
  | LPAR bExpression RPAR           {$2}

// C ::= x := a | A[a] := a | skip | C ; C | if GC fi | do GC od
command:
  | VARIABLE ASSIGN aExpression {Assign($1, $3)}
  | VARIABLE LSPAR aExpression RSPAR ASSIGN aExpression {AssignArray($1, $3, $6)}
  | command SEMICOLON command  {Cmds($1, $3)}
  | IF gCommand FI             {If($2)}
  | DO gCommand OD             {Do($2)}
  | SKIP                       {Skip}
  
// GC ::= b -> C | GC [] GC
gCommand:
  | bExpression ARROW command     {Statement($1, $3)}
  | gCommand GCSEP gCommand       {GCmds($1, $3)}
 

%%
